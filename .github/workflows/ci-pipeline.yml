name: FutStats API - CI Pipeline

# Define os gatilhos:
on:
  # Roda toda vez que um 'push' for feito para a branch 'main'
  push:
    branches: [ "main" ]
  # Roda também toda vez que um Pull Request for aberto ou atualizado para a branch 'main'
  pull_request:
    branches: [ "main" ]

# Define os jobs a serem executados.
jobs:
  # Nome do nosso job
  build-and-test:
    # Define o ambiente virtual onde o job vai rodar.
    runs-on: ubuntu-latest

    # Define a sequência de passos a serem executados neste job.
    steps:
      # Passo 1: Clona o código do repositório para dentro do ambiente virtual.
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente com a versão correta do Java.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Passo 3: Cache das dependências do Maven.
      # Este passo é uma otimização: ele salva as bibliotecas baixadas para que os próximos builds
      # sejam muito mais rápidos.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Passo 4: Compila, testa e empacota o projeto com o Maven.
      # O comando 'mvn -B package' automaticamente compila e RODA OS TESTES (unitários e de integração).
      # Se qualquer teste falhar, este passo falhará e o pipeline ficará vermelho.
      - name: Build and test with Maven
        run: mvn -B package --file pom.xml
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}